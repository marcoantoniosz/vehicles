{"ast":null,"code":"var _jsxFileName = \"/home/tom/Documentos/corelabbr/corelab-web-challenge/src/pages/Edit/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { getById } from '../../services/API';\nimport { useParams } from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from \"yup\";\nimport { updateVehicle } from '../../services/API';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Edit() {\n  _s();\n\n  const schema = yup.object({\n    name: yup.string().max(50, 'Limite de 50 caracteres').required('É necessário que o campo de nome seja preenchido'),\n    brand: yup.string().max(50, 'Limite de 50 caracteres').required('É necessário que o campo de marca seja preenchido'),\n    color: yup.string().max(50, 'Limite de 50 caracteres').required('É necessário que o campo de cor seja preenchido'),\n    year: yup.number().min(1000).max(2999).required('É necessário que o campo de ano seja preenchido'),\n    plate: yup.string().min(7, 'A placa deve possuir 7 caracteres').max(7, 'A placa deve possuir 7 caracteres').required('É necessário que o campo de placa seja preenchido'),\n    description: yup.string().max(500, 'Limite de 500 caracteres').required('É necessário que o campo de descrição seja preenchido'),\n    price: yup.number().required('É necessário que o campo de preço seja preenchido')\n  }).required();\n  const {\n    register,\n    handleSubmit,\n    formState: {\n      errors\n    }\n  } = useForm({\n    resolver: yupResolver(schema)\n  });\n\n  const onSubmit = async data => {\n    const structure = {\n      name: data.name,\n      brand: data.brand,\n      color: data.color,\n      year: data.year,\n      plate: data.plate,\n      description: data.description,\n      price: data.price,\n      favorite: 0\n    };\n    await updateVehicle(structure);\n    window.location.href = '/';\n  };\n\n  const {\n    id\n  } = useParams();\n  const [vehicle, setVehicle] = useState([]);\n  const fetchData = useCallback(async () => {\n    const response = await getById(id);\n    setVehicle(response);\n  }, [id]);\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Edit\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Edit, \"HoL0O4I4iGxG8pBW7ksa27/JV7Q=\", false, function () {\n  return [useForm, useParams];\n});\n\n_c = Edit;\n\nvar _c;\n\n$RefreshReg$(_c, \"Edit\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","getById","useParams","useForm","yupResolver","yup","updateVehicle","Edit","schema","object","name","string","max","required","brand","color","year","number","min","plate","description","price","register","handleSubmit","formState","errors","resolver","onSubmit","data","structure","favorite","window","location","href","id","vehicle","setVehicle","fetchData","response"],"sources":["/home/tom/Documentos/corelabbr/corelab-web-challenge/src/pages/Edit/index.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { getById } from '../../services/API';\nimport { useParams } from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from \"yup\";\nimport { updateVehicle } from '../../services/API';\n\nexport default function Edit() {\n\n  const schema = yup.object({\n    name: yup.string().max(50, 'Limite de 50 caracteres').required('É necessário que o campo de nome seja preenchido'),\n    brand: yup.string().max(50, 'Limite de 50 caracteres').required('É necessário que o campo de marca seja preenchido'),\n    color: yup.string().max(50, 'Limite de 50 caracteres').required('É necessário que o campo de cor seja preenchido'),\n    year: yup.number().min(1000).max(2999).required('É necessário que o campo de ano seja preenchido'),\n    plate: yup.string().min(7, 'A placa deve possuir 7 caracteres').max(7, 'A placa deve possuir 7 caracteres').required('É necessário que o campo de placa seja preenchido'),\n    description: yup.string().max(500, 'Limite de 500 caracteres').required('É necessário que o campo de descrição seja preenchido'),\n    price: yup.number().required('É necessário que o campo de preço seja preenchido'),\n  }).required();\n\n  const { register, handleSubmit, formState: { errors } } = useForm({\n    resolver: yupResolver(schema)\n  });\n\n  const onSubmit = async (data) => {\n    const structure = {\n      name: data.name,\n      brand: data.brand,\n      color: data.color,\n      year: data.year,\n      plate: data.plate,\n      description: data.description,\n      price: data.price,\n      favorite: 0\n    }\n    await updateVehicle(structure);\n    window.location.href = '/';\n  };\n\n  const { id } = useParams();\n  const [vehicle, setVehicle] = useState([]);\n\n  const fetchData = useCallback(async () => {\n    const response = await getById(id);\n    setVehicle(response);\n  }, [id]);\n\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  return (\n    <div>Edit</div>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}